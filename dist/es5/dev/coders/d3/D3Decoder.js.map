{"version":3,"sources":["../../../../es6/dev/coders/d3/D3Decoder.js"],"names":[],"mappings":";;;;AAAA,CAAC,UAAU,IAAV,EAAgB,OAAhB,EAAyB;AACtB,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;;;AAG5C,eAAO,CACH,oBADG,CAAP,EAEG,OAFH,EAH4C;KAAhD,MAOO,IAAI,QAAO,yDAAP,KAAmB,QAAnB,EAA6B;;;;AAIpC,eAAO,OAAP,GAAiB,QAAQ,QAAQ,WAAR,CAAR,CAAjB,CAJoC;KAAjC,MAKA;;AAEH,aAAK,UAAL,GAAkB,KAAK,UAAL,IAAmB,EAAnB,CAFf;AAGH,aAAK,UAAL,CAAgB,gBAAhB,GAAmC,QAAQ,KAAK,UAAL,CAAgB,OAAhB,CAA3C,CAHG;KALA;CARV,aAkBO,UAAU,OAAV,EAAmB;;AAEvB,QAAI,mBAAmB;AACnB,iBAAS,IAAT;AACA,gBAAQ,gBAAU,IAAV,EAAgB,QAAhB,EAA0B;AAC9B,gBAAI,OAAO,KAAK,IAAL,CADmB;AAE9B,iBAAK,OAAL,GAAe,EAAf,CAF8B;AAG9B,gBAAI,WAAW;AACX,sBAAM,KAAK,IAAL;AACN,uBAAO,eAAU,GAAV,EAAe,GAAf,EAAoB,KAApB,EAA2B;AAC9B,6BAAS,IAAT,CAAc,QAAd,GAAyB,IAAI,KAAK,GAAL,CAAS,KAAK,OAAL,EAAc,QAA3B,EAAqC,GAArC,EAA0C,KAA1C,CAAzB,CAD8B;AAE9B,2BAAO,KAAK,QAAL,CAAc,IAAd,CAAP,CAF8B;iBAA3B;AAIP,sBAAM,QAAQ,EAAR;aANN,CAH0B;AAW9B,gBAAI,KAAK,OAAL,CAAa,IAAb,KAAsB,SAAtB,EAAiC;AACjC,yBAAS,IAAT,GAAgB,KAAK,OAAL,CAAa,IAAb,CADiB;aAArC;AAGA,mBAAO,QAAP,CAd8B;SAA1B;KAFR,CAFmB;;AAsBvB,QAAI,OAAJ,EAAa;AACT,gBAAQ,UAAR,CAAmB,gBAAnB,EADS;KAAb;;AAIA,WAAO,gBAAP,CA1BuB;CAAnB,CAlBR","file":"D3Decoder.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        // AMD. Register as an anonymous module.\n        define([\n            'templating/Decoder'\n        ], factory)\n        ;\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('./Decoder'));\n    } else {\n        // Browser globals (root is window)\n        root.Templating = root.Templating || {};\n        root.Templating.componentDecoder = factory(root.Templating.Decoder);\n    }\n}(this, function (Decoder) {\n\n    var componentDecoder = {\n        tagName: 'cp',\n        decode: function (node, children) {\n            var data = node.data;\n            data.attribs = {};\n            var response = {\n                name: data.name,\n                tmpEl: function (tag, obj, scope) {\n                    response.data.instance = new data.src(data.dataset, children, obj, scope);\n                    return data.instance['el'];\n                },\n                data: data || {}\n            };\n            if (data.dataset.bind !== undefined) {\n                response.bind = data.dataset.bind;\n            }\n            return response;\n        }\n    };\n\n    if (Decoder) {\n        Decoder.addDecoder(componentDecoder);\n    }\n\n    return componentDecoder;\n\n}));"]}