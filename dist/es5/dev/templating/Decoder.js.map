{"version":3,"sources":["../../../es6/dev/templating/Decoder.js"],"names":[],"mappings":"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","file":"Decoder.js","sourcesContent":["(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        // AMD. Register as an anonymous module.\n        define(['./utils/List', './dom', './DomFragment'], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('./utils/List'), require('./dom'), require('./DomFragment'));\n    }\n}(this, function(List, dom, DomFragment) {\n    'use strict';\n    var _decoders = {};\n\n    function isObject(obj) {\n        return obj === Object(obj);\n    }\n\n    function isArray(obj) {\n        return (Array.isArray) ? Array.isArray(obj) : toString.call(obj) === '[object Array]';\n    }\n\n\n    /**\n     *\n     * @constructor\n     * @param root\n     */\n    class Decoder {\n        static   addDecoder(decoder) {\n            if (_decoders[decoder.tagName] === undefined) {\n                _decoders[decoder.tagName] = decoder;\n            }\n        }\n\n        constructor(root) {\n            this._root = (typeof root === 'string') ? JSON.parse(root) : root;\n            if (root.children && root.children.length > 0) {\n                this.children = this._parseElements(root.children);\n            }\n        }\n\n        renderFragment(template, tag) {\n            let el = document.createElement('template');\n            if (el.content === undefined) {\n                if (tag === 'td') {\n                    el = document.createElement('tr');\n                } else if (tag === 'tr') {\n                    el = document.createElement('tbody');\n                }\n            }\n            el.innerHTML = template;\n            return (el.content !== undefined) ? el.content.firstChild : el.firstChild;\n        };\n\n        _parseElements(nodeList) {\n            var context = {};\n            nodeList.forEach((node) => {\n                let name = node.data.name;\n                var tagName = node.tagName;\n                if (tagName) {\n                    let decodedData = _decoders[tagName].decode(node);\n                    if (decodedData) {\n                        let nodeParams = {\n                            name:     decodedData.name,\n                            data:     decodedData.data,\n                            tmpEl:    decodedData.tmpEl,\n                            parse:    decodedData.parse,\n                            replace:  decodedData.replace,\n                            id:       node.id,\n                            template: () => {\n                                return this.renderFragment(node.template, node.data.tag)\n                            },\n                            noAttach: _decoders[tagName].noAttach || node.data.tplSet.noattach\n                        };\n                        if (node.children &&\n                            node.children.length > 0) {\n                            nodeParams.children = this._parseElements(node.children);\n                        }\n                        context[name] = nodeParams;\n                    }\n                } else if (name) {\n                    context[name] = {\n                        id:   node.id,\n                        data: node.data,\n                        name\n                    };\n                }\n            });\n            return context;\n        };\n\n        renderTemplate(childNodes = {}, obj = {}, fragment) {\n            let resp = {},\n                _runAll = [];\n            Object.keys(childNodes).forEach((name) => {\n                let childFragment = fragment,\n                    child = childNodes[name],\n                    children = child.children,\n                    elGroup = new List(),\n                    placeholder = document.createElement(child.data.tplSet.tag || 'div');\n                placeholder.setAttribute('style', 'display:none;');\n                placeholder.id = child.id;\n                elGroup.onDelete((key, size) => {\n                    if (size === 0 && key.parentNode) {\n                        key.parentNode.replaceChild(placeholder, key);\n                        childFragment = () => placeholder;\n                    }\n                });\n                if (child.template) {\n                    let run = (force, index) => {\n                        let template = childFragment();\n                        if (force instanceof HTMLElement === true) {\n                            template = force;\n                        }\n\n                        let childNodes,\n                            data = (template !== force) && (isObject(force) || isArray(force)) ? force : obj;\n                        if (!child.noAttach || force) {\n                            let placeholder = template.querySelector('#' + child.id) || template;\n\n                            if (children) {\n                                childNodes = this.renderTemplate(children, data, () => {\n                                    return template;\n                                });\n                            }\n                            let element = new DomFragment(child, placeholder, childNodes, elGroup, index, data);\n\n                            template = element.el;\n\n\n                            if (childNodes && childNodes.runAll && child.parse) {\n                                childNodes.runAll();\n                            }\n\n                            if (childNodes && !element.children) {\n                                element.children = childNodes;\n                            }\n                            element.elGroup = elGroup;\n                            element.run = run;\n                            elGroup.set(element.el, element, index);\n                            return element;\n                        }\n\n                    }\n                    _runAll.push(run);\n                    resp[name] = {\n                        data: child.data,\n                        run,\n                        elGroup\n                    };\n\n                } else {\n                    let element = new dom.Element(childFragment().querySelector('#' + child.id), child);\n                    element.removeAttribute('id');\n                    element.elGroup = elGroup;\n                    elGroup.set(element.el, element);\n                    resp[name] = element;\n                }\n            });\n            let setProp = (obj, name, fn) => {\n                Object.defineProperty(obj, name, {\n                    enumerable: false,\n                    value:      fn\n                });\n            };\n\n            let runAll = (el) => {\n                _runAll.forEach(run => run(el));\n                return resp;\n            };\n\n            setProp(resp, 'runAll', runAll);\n\n            return resp;\n        };\n\n        render(obj) {\n            var fragment = this.renderFragment(this._root.template);\n            return {\n                fragment:   fragment,\n                children:   this.renderTemplate(this.children, obj, () => fragment).runAll(),\n                templateId: this._root.templateId\n            };\n        };\n    }\n\n\n    return Decoder;\n\n}));"]}