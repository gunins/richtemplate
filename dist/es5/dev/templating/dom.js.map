{"version":3,"sources":["../../../es6/dev/templating/dom.js"],"names":[],"mappings":"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","file":"dom.js","sourcesContent":["/**\n * Created by guntars on 10/10/2014.\n */\n//## templating/dom Class for dom manipulation\ndefine(function() {\n    'use strict';\n\n    function isObject(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    }\n\n    function createPlaceholder(tag) {\n        var placeholder = document.createElement(tag || 'div');\n        placeholder.setAttribute('style', 'display:none;');\n        return placeholder;\n    }\n\n    function destroy(instance) {\n        let keys = Object.keys(instance);\n        if (keys.length > 0) {\n            keys.forEach((key)=> {\n                if (key !== 'root') {\n                    let children = instance[key];\n                    if (children.elGroup !== undefined && children.elGroup.size > 0) {\n                        children.elGroup.forEach(child=> {\n                            if (child !== undefined && child.remove !== undefined) {\n                                child.remove(true);\n                            }\n                        })\n                    }\n                }\n            });\n        }\n    }\n\n    // ## widget/dom.Element\n    //     @method Element\n    //     @param {Object} node\n    class Element {\n        constructor(el, node) {\n            this.el = el;\n            this._events = [];\n            //this._node = node;\n            this.name = node.name || node.data.name;\n            let data = this.data = node.data;\n            if (data) {\n                if (data.bind) {\n                    this.bind = data.bind;\n                }\n                /* if (data.dataset) {\n                 this.dataset = data.dataset;\n                 }*/\n            }\n        };\n\n        clone(...args) {\n            return this.run(...args);\n        };\n\n        // Shortcut to - `dom.text`\n        text(text) {\n            dom.text(this, text);\n        };\n\n        detach() {\n            dom.detach(this);\n        };\n\n        attach() {\n            dom.attach(this);\n        };\n\n        // Shortcut to - `dom.changePosition`\n        changePosition(index) {\n            dom.changePosition(this, index);\n        }\n\n        // Shortcut to - `dom.setAttribute`\n        setAttribute(prop, value) {\n            dom.setAttribute(this, prop, value);\n        };\n\n        // Shortcut to - `dom.getAttribute`\n        getAttribute(prop) {\n            return dom.getAttribute(this, prop);\n        };\n\n        // Shortcut to - `dom.removeAttribute`\n        removeAttribute(prop) {\n            dom.removeAttribute(this, prop);\n        };\n\n        // Shortcut to - `dom.setStyle`\n        setStyle(prop, value) {\n            dom.setStyle(this, prop, value);\n        };\n\n        // Shortcut to - `dom.getStyle`\n        getStyle(prop) {\n            return dom.getStyle(this, prop);\n        }\n\n        // Shortcut to - `dom.removeStyle`\n        removeStyle(prop) {\n            dom.removeStyle(this, prop);\n        };\n\n        // Shortcut to - `dom.addClass`\n        addClass(className) {\n            dom.addClass(this, className);\n        };\n\n        // Shortcut to - `dom.hasClass`\n        hasClass(className) {\n            return dom.hasClass(this, className);\n        };\n\n        // Shortcut to - `dom.removeClass`\n        removeClass(className) {\n            dom.removeClass(this, className);\n        };\n\n        // Shortcut to - `dom.val`\n        val(val) {\n            return dom.val(this, val);\n        };\n\n        // Shortcut to - `dom.on`\n        on(event, cb, context) {\n            var args = Array.prototype.slice.call(arguments, 0);\n            return dom.on.apply(false, [this].concat(args));\n        };\n\n        // Shortcut to - `dom.onDOMAttached`\n        onDOMAttached() {\n            return dom.onDOMAttached(this);\n        };\n\n        // Shortcut to - `dom.remove`\n        remove(force) {\n            dom.remove(this, force);\n        };\n    }\n\n    var dom = {\n        //Removing element from DOM\n        //\n        //      @method detach\n        //      @param {dom.Element}\n\n        detach (node) {\n            if (node.placeholder instanceof HTMLElement === false) {\n                node.placeholder = createPlaceholder(node.data.tag || node.el.tagName);\n            }\n            if (node && node.el && node.el.parentNode) {\n                node.el.parentNode.replaceChild(node.placeholder, node.el)\n            }\n        },\n        //Adding element back to DOM\n        //\n        //      @method attach\n        //      @param {dom.Element}\n        attach (node) {\n            if (node && node.el && node.placeholder && node.placeholder.parentNode) {\n                node.placeholder.parentNode.replaceChild(node.el, node.placeholder)\n            }\n        },\n        // Insert element to the end of parent childs\n        //\n        //      @method append\n        //      @param {dom.Element} parent\n        //      @param {dom.Element} child\n        append(parent, child) {\n            if (parent.el !== undefined && child.el !== undefined) {\n                parent.el.appendChild(child.el);\n            }\n\n        },\n        // Insert element to the beginning of parent childs\n        //\n        //      @method prepend\n        //      @param {dom.Element} parent\n        //      @param {dom.Element} child\n        prepend(parent, child) {\n            dom.insertBefore(parent, child, 0);\n        },\n        // Insert element to the before of specific, child by index\n        //\n        //      @method insertBefore\n        //      @param {dom.Element} parent\n        //      @param {dom.Element} child\n        insertBefore(parent, child, index) {\n            let parentEl = parent.el,\n                childEl = child.el;\n            if (parentEl !== undefined && childEl !== undefined) {\n                if (parentEl.childNodes[index] !== undefined) {\n                    parentEl.insertBefore(childEl, parentEl.childNodes[index]);\n                } else {\n                    parentEl.appendChild(childEl);\n                }\n            }\n        },\n\n        // Changing position in nodeList\n        //\n        //      @method changePosition\n        //      @param {dom.Element}\n        //      @param {Int} index\n        changePosition(el, index){\n\n            let HTMLElement = el.el;\n            if (HTMLElement && HTMLElement.parentNode) {\n\n                let parentNode = HTMLElement.parentNode,\n                    elGroup = el.elGroup,\n                    size = elGroup.size,\n                    target = elGroup.getKeyByIndex(index) || elGroup.getLast();\n\n\n                if (target !== HTMLElement) {\n                    if (size - 1 >= index) {\n                        parentNode.insertBefore(HTMLElement, target);\n                    } else if (target.nextSibling !== null) {\n                        parentNode.insertBefore(HTMLElement, target.nextSibling);\n                    } else {\n                        parentNode.appendChild(HTMLElement);\n                    }\n\n                    el.elGroup.changeIndex(HTMLElement, index);\n                }\n            }\n        },\n        // Adding text in to node\n        //\n        //      @method text\n        //      @param {dom.Element}\n        //      @param {String} text\n        text (node, text) {\n            if (node && node.el) {\n                node.el.innerHTML = text;\n            }\n        },\n        // Setting Attribute in to node\n        //\n        //      @method setAttribute\n        //      @prop {dom.Element} node\n        //      @prop {String||Object} prop\n        //      @prop {String} value\n        setAttribute (node, prop, value) {\n            if (node && node.el) {\n                if (isObject(prop)) {\n                    Object.keys(prop).forEach((key)=> {\n                        node.el.setAttribute(key, prop[key]);\n                    });\n                } else {\n                    node.el.setAttribute(prop, value);\n                }\n            }\n        },\n        // Getting Attribute in to node\n        //\n        //      @method getAttribute\n        //      @prop {dom.Element} node\n        //      @prop {String||Object} prop\n        //      @return {String} value\n        getAttribute (node, prop) {\n            if (node && node.el) {\n                return node.el.getAttribute(prop);\n            } else {\n                return undefined;\n            }\n        },\n        // Removing Attribute from node\n        //\n        //      @method removeAttribute\n        //      @prop {dom.Element} node\n        //      @prop {String} prop\n        removeAttribute (node, prop) {\n            if (node && node.el) {\n                node.el.removeAttribute(prop);\n            }\n        },\n        // Setting css style in to node\n        //\n        //      @method setStyle\n        //      @prop {dom.Element} node\n        //      @prop {String||Object} prop\n        //      @prop {String} value\n        setStyle(node, prop, value) {\n            if (node && node.el) {\n                if (isObject(prop)) {\n                    Object.keys(prop).forEach((key)=> {\n                        node.el.style[key] = prop[key];\n                    });\n                } else {\n                    node.el.style[prop] = value;\n                }\n            }\n        },\n        // Getting css style from node\n        //\n        //      @method getStyle\n        //      @prop {dom.Element} node\n        //      @prop {String} prop\n        //      @return {String} value\n        getStyle(node, prop) {\n            if (node && node.el) {\n                if (node.el !== undefined && node.el.style !== undefined) {\n                    return node.el.style[prop];\n                } else {\n                    return undefined;\n                }\n            }\n        },\n        // Removing css style from node\n        //\n        //      @method removeAttribute\n        //      @prop {dom.Element} node\n        //      @prop {String} prop\n        removeStyle(node, prop) {\n            if (node && node.el) {\n                node.el.style[prop] = '';\n            }\n        },\n        // Adding class in to node\n        //\n        //      @method addClass\n        //      @param {dom.Element} node\n        //      @param {String} className\n        addClass(node, className) {\n            if (node && node.el) {\n                node.el.classList.add(className);\n            }\n        },\n        // checking if className exists in node\n        //\n        //      @method hasClass\n        //      @param {dom.Element} node\n        //      @param {String} className\n        //      @return boolean\n        hasClass(node, className) {\n            if (node && node.el) {\n                return node.el.classList.contains(className);\n            } else {\n                return false;\n            }\n        },\n        // Remove class from node\n        //\n        //      @method removeClass\n        //      @param {dom.Element} node\n        //      @param {string} className\n        removeClass(node, className) {\n            if (node && node.el) {\n                node.el.classList.remove(className);\n            }\n        },\n        // Setting, Getting value to input element\n        //\n        //      @method val\n        //      @param {dom.Element} node\n        //      @param? {String} val\n        //      @return {String}\n        val(node, val) {\n            if (node && node.el) {\n                var el = node.el;\n                if (val !== undefined) {\n                    el.value = val;\n                } else {\n                    return el.value;\n                }\n            }\n        },\n        // Adding DOM Event in to Element\n        //\n        //      @method on\n        //      @param {dom.Element} element\n        //      @param {String} ev\n        //      @param {Function} cb\n        //      @param {Object} context\n        //      @return {Object} { remove() }\n        on(element, ev, cb, context, ...args) {\n            var el = element.el,\n                events = ev.split(' '),\n                fn = (e) => {\n                    cb.apply(context || this, [e, element].concat(args));\n                };\n\n            events.forEach((event)=> {\n                el.addEventListener(event, fn);\n            });\n            var evt = {\n                remove: () => {\n                    events.forEach(event => el.removeEventListener(event, fn));\n                    let evts = element._events;\n                    evts.splice(evts.indexOf(evt), 1);\n                }\n            };\n            element._events.push(evt);\n            return evt\n        },\n        // Remove Dom Element from Dom\n        //\n        //      @method remove\n        //      @param {dom.Element}\n        remove (el) {\n            while (el._events.length > 0) {\n                el._events.shift().remove();\n            }\n\n            if (el.children) {\n                destroy(el.children);\n            }\n            if (el.elGroup !== undefined) {\n                el.elGroup.delete(el.el);\n            }\n\n            if (el.el !== undefined) {\n                if (el.el.remove) {\n                    el.el.remove();\n                } else if (el.el.parentNode) {\n                    el.el.parentNode.removeChild(el.el);\n                }\n                delete el.el;\n            }\n        },\n        // executes when element attached to Dom\n        //\n        //      @method onDOMAttached\n        //      @param {dom.Element}\n        //      @param {function} cb\n        //      @param {function} context\n        onDOMAttached(el) {\n            let handlers = [],\n                attached = false,\n                step;\n\n            if (el.el !== undefined) {\n                step = () => {\n                    if (attached) {\n                        while (handlers.length > 0) {\n                            handlers.shift()();\n                        }\n                    } else {\n                        window.requestAnimationFrame(step);\n                        if (document.body.contains(el.el)) {\n                            attached = true;\n                        }\n                    }\n                };\n            }\n            return {\n                then: (cb, context) => {\n                    handlers.push(cb.bind(context || this));\n                    window.requestAnimationFrame(step);\n                }\n            }\n        },\n        // Element\n        Element: Element\n    };\n\n\n    return dom;\n});"]}