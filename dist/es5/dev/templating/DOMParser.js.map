{"version":3,"sources":["../../../es6/dev/templating/DOMParser.js"],"names":[],"mappings":"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","file":"DOMParser.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['templating/htmlparser2'], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('htmlparser2'));\n    } else {\n        // Browser globals (root is window)\n        root.Templating = root.Templating || {};\n        root.Templating.DOMParser = factory(root.htmlparser, root.Templating.utils);\n    }\n}(this, function (htmlparser) {\n    'use strict';\n    let DomUtils = htmlparser.DomUtils;\n\n\n    /**\n     *\n     * @param html\n     * @constructor\n     */\n    class DOMParser {\n        constructor(html) {\n            let handler = new htmlparser.DomHandler();\n            let parser = new htmlparser.Parser(handler);\n            parser.write(html);\n            this.dom = handler.dom;\n        }\n\n        setAttributeValue(el, name, value) {\n            el.attribs = el.attribs || {};\n            if (value === undefined) {\n                delete el.attribs[name];\n            } else {\n                el.attribs[name] = value;\n            }\n        }\n\n        createElement(tagName) {\n            return {\n                type:     'tag',\n                name:     tagName,\n                attribs:  {},\n                children: []\n            };\n        }\n\n        getElementByTagName(tagName, elements) {\n            return DomUtils.findOne(function (el) {\n                return el.name == tagName;\n            }, elements);\n        }\n\n        getElementByPrefix(prefix, elements) {\n            return DomUtils.findOne(function (el) {\n                return el.name.split('-')[0] == prefix;\n            }, elements);\n        }\n\n        getChildrenElements(element) {\n            return DomUtils.filter(function (el) {\n                return el.type === 'tag';\n            }, DomUtils.getChildren(element), false);\n        }\n\n        removeComments(element) {\n            element = element || this.dom[0];\n            if (element.type === 'comment') {\n                DomUtils.removeElement(element);\n            }\n            var children = DomUtils.getChildren(element);\n            if (children && children.length > 0) {\n                children.forEach((el)=> {\n                    this.removeComments(el);\n                });\n            }\n        }\n\n        applyClass(templateId, element) {\n            element = element || this.dom[0];\n            if (element.type === 'tag') {\n                this.setAttributeValue(element, 'class', (templateId + ' ' + (this.getAttributeValue(element, 'class') || '')).trim());\n            }\n            var children = DomUtils.getChildren(element);\n            if (children && children.length > 0) {\n                children.forEach((el)=> {\n                    this.applyClass(templateId, el);\n                });\n            }\n        }\n\n        findOneChild(element) {\n            return DomUtils.findOneChild(function (el) {\n                return el.type === 'tag';\n            }, element ? element : this.dom);\n        }\n\n        isText(el) {\n            return el.type === 'text';\n        }\n    }\n\n    Object.assign(DOMParser.prototype, {\n        DomUtils:          DomUtils,\n        getOuterHTML:      DomUtils.getOuterHTML,\n        getInnerHTML:      DomUtils.getInnerHTML,\n        getChildren:       DomUtils.getChildren,\n        replaceElement:    DomUtils.replaceElement,\n        appendChild:       DomUtils.appendChild,\n        getAttributeValue: DomUtils.getAttributeValue,\n        removeElement:     DomUtils.removeElement\n    });\n\n    return DOMParser;\n}));"]}